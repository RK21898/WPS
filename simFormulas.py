"""This Module contains the formulas used to calculate certain
values used in the simulation heatpumpSim in the process
of the program"""

###FUNCTION SECTION###

##misschien overbodig
def WattToJoules(watt):
    """Convert kWh to joules
    Returns the equivalent of x kWh as y joules"""
    return watt * 1000

##misschien overbodig
def PowerRequirementForRoom(length, width, height, InsulationTypeInformation):
    """Calculate the power requirement for a room using
    Length, Width and Height in Meters
    RoomType like dictionary
    Length * Width * Height * WattPerM2
    Returns the PowerRequirementForRoom"""
    return length * width * height * InsulationTypeInformation

def FloorWarmingPower(surface):
    """Calculate the power the floor warming can deliver
    @param surface: the surface of the floor the warming is placed in
    @return: the power in increments of 970 watts per 10 square meters"""
    return (surface / 10) * 970 #in watts


def COP(powerOutput, addedPower):
    """Calculate the COP coefficient of the heat pump
    powerOutput / addedPower
    Returns the COP coefficient"""
    return powerOutput / addedPower

##misschien overbodig
def WaterFlow(power, density, specific_heat, deltaT):
    """Calculates the volume flow rate
    Used for both Intake and Output sides in heat pump
    power in watts
    Density in kg/m^3
    Specific_heat in Joule/Kg.K
    DeltaT in Kelvin
    Returns the volume flow rate in m^3/s"""
    return power / (density * specific_heat * deltaT)

def SPF(Qw, Qk, E, G):
    """Seasonal Performance Factor
    @param Qw: warmth delivered to building by heat pump in MWh
    @param Qk: cold delivered to building by heat pump in MWh
    @param E: electricity used by the pump system in MWh
    @param G: electric equivalent of natural gas used by the pump system
    #Returns Seasonal Performance Factor"""
    return (Qw + Qk) / (E + G)

def SubstanceMass(m, rho):
    """True mass in kg of the substance calculated 
    @param m: capacity in cubic meters
    @param rho: specific mass of a substance
    @return: true mass"""
    return m * rho

##misschien betere naam voor functie
def PowerRequiredToHeatSubstance(m, c, DeltaT):
    """Calculate the power needed to heat up a substance, like air
    @param m: mass of substance
    @param c: specific heat
    @param DeltaT: Desired temp - start temp in K
    @return: the amount of power required to heat up substance"""
    return (m * c * DeltaT) / 3600000

def CurrentDeltaT(Q,m,c):
    """Calculate the current temperature difference using the warmth formula
    @param Q: heat in joules
    @param m: mass of substance
    @param c: specific heat
    @return: current temp difference"""
    return Q / (m * c)

def WarmthRequired(m,c,DeltaT):
    """Calculate the warmth needed to heat up a substance, like air
    @param m: mass of substance
    @param c: specific heat
    @param DeltaT: Desired temp - start temp in K
    @return: the amount of warmth required to heat up substance"""
    return (m * c * DeltaT)

def TrueSubstanceMass(m, rho):
    """Calculate the true mass of a substance using the capacity in 
    cubic meters and the specific mass in kilograms per cubic meter"""
    return m * rho

def TransititionTime(requirement, power):
    """Calculate the time needed to heat up a substance, like air
    Power = the output of the device used to heat up the substance in kW
    Requirement = the power needed to heat up the substance in kWh
    Returns the time requirement in hours"""
    return requirement / power

def HeatTransfer(transferCoefficient, surface, deltaT):
    """Calculate the power generated by item A to transfer the heat from
    item A to item B so that they become the same temperature"""
    return transferCoefficient * surface * deltaT

def TransferCoefficient(velocity):
    """Calculate the transfer coefficient in watts per square meter
    per kelvin using the airflow in meters per second => 12*sqrt(v)"""
    return 12 * velocity




