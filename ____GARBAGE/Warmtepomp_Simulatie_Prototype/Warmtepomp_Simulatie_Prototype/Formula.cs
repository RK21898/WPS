using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Warmtepomp_Simulatie_Prototype
{
    public class Formula
    {
        RoomTypeInformation rti;

        /// <summary>
        /// Convert kiloWatthour to joules
        /// </summary>
        /// <param name="watt"></param>
        /// <returns>the equivalent of x kWh as y joules</returns>
        public decimal WattToJoules(decimal watt)
        => watt * 1000;

        /// <summary>
        /// Calculate the power requirement for a room using
        /// length * width * height * specific power per room
        /// </summary>
        /// <param name="length"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="isolationquality"></param>
        /// <returns>power in watts</returns>
        public decimal PowerRequirementForRoom(decimal length, decimal width, decimal height, string isolationquality)
        {
            decimal capacity = length * width * height;

            rti.RoomTypeInfo.TryGetValue(isolationquality, out int watt); //fetch from watt per roomtype table

            return capacity * watt;
        }

        /// <summary>
        /// Calculate the COP coefficient of the heat pump
        /// powerOutput / addedPower
        /// </summary>
        /// <param name="powerOutput">power from the source</param>
        /// <param name="addedPower">power generated by the compressor in pump</param>
        /// <returns>COP coefficient</returns>
        public decimal COP(decimal powerOutput, decimal addedPower)
        => powerOutput / addedPower;

        /// <summary>
        /// Calculates the volume flow rate
        /// Use for both Intake and Output sides in heat pump.
        /// power in Watts
        /// Density in kg/m^3
        /// specific heat in Joule/kg.K
        /// Delta T in Kelvin
        /// </summary>
        /// <param name="power">in watts</param>
        /// <param name="density">in kg/m^3</param>
        /// <param name="specific_heat">in joule/kgK</param>
        /// <param name="deltaT">desired temp - start temp in K</param>
        /// <returns>volume flow rate in m^3/s</returns>
        public decimal WaterFlow(decimal power, decimal density, decimal specific_heat, decimal deltaT)
        => power / (density * specific_heat * deltaT);

        /// <summary>
        /// Seasonal Performance Factor
        /// </summary>
        /// <param name="Qw">Warmth delivered to building by heat pump in MWh</param>
        /// <param name="Qk">Cold delivered to building by heat pump in MWh</param>
        /// <param name="E">Electricity used by the pump system in MWh</param>
        /// <param name="G"> Electric equivalent of natural gas used by the pump system in MWh </param>
        /// <returns>Seasonal Performance Factor</returns>
        public decimal SPF(decimal Qw, decimal Qk, decimal E, decimal G)
        => (Qw + Qk) / (E + G);

        /// <summary>
        /// Calculate the power needed to heat up a substance, like air
        /// </summary>
        /// <param name="m">mass of substance</param>
        /// <param name="c">specific heat</param>
        /// <param name="DeltaT">desired temp - start temp in K</param>
        /// <returns>The amount of power required to heat up substance</returns>
        public decimal PowerRequirementToHeatUpSubstance(decimal m, decimal c, decimal DeltaT)
        => (m * c * DeltaT) / 3600000;

        /// <summary>
        /// Calculate the time needed to heat up a substance, like air
        /// </summary>
        /// <param name="power">the output of the device used to heat up substance in kW</param>
        /// <param name="requirement">the power needed to heat up substance in kWh</param>
        /// <returns>time requirement in hours * 3600 (so it will be seconds)</returns>
        public decimal TimeRequirementToHeatUpSubstance(decimal power, decimal requirement)
        => (requirement / power) * 3600;
    }
}
